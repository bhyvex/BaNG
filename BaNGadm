#!/usr/bin/env perl
#
# Copyright 2013 Patrick Schmid <schmid@phys.ethz.ch>, distributed under
# the terms of the GNU General Public License version 2 or later.
#
# Authors: Patrick Schmid <schmid@phys.ethz.ch> & Claude Becker <becker@phys.ethz.ch>
#
use strict;
use warnings;
use Cwd qw( abs_path );
use File::Basename;
use Getopt::Long qw( :config no_auto_abbrev );
use POSIX qw( strftime );

use lib dirname( abs_path($0) ) . "/lib";
use BaNG::Config;
use BaNG::Common;

my $version = '0.1';
my ($add_arg, $delete_arg);
my $crontabonly;
my $debug_arg;
my $debuglevel_arg;
my $dryrun_arg;
my $file_arg;
my $group_arg;
my $host_arg;
my $prefix_arg;
my $showgroups;

#################################
# Main
#
parse_command_options();
get_serverconfig($prefix_arg);
cli_args_override_global_config();

if ( $crontabonly ) {
    my $crontab = generated_crontab();
    if ( $serverconfig{dryrun} ){
        print "$crontab\n";
    } else {
        print "write crontab\n";
        open(CRONTAB, "> /etc/cron.d/BaNG") || die ("Could not open /etc/cron.d/BaNG");
        print CRONTAB $crontab;
        close(CRONTAB);
    }
    exit 0;
}

if ( $showgroups ) {
    get_group_config();

    print "All available Backup-Groups:\n";
    print "---------------------------\n";
    foreach my $group (sort keys %groups) {
        print "$group \n";
    }

    exit 0;
}

if ( $add_arg ) {
    my $timestamp = strftime("%Y/%m/%d %H:%M:%S", localtime);
    my $createdby = "root with CLI";
    my $configtype;

    if ( $host_arg && $group_arg ) {
        $configtype = "host";
    } elsif ( ! $host_arg && $group_arg ) {
        $host_arg   = "0";
        $configtype = "group";
    };

    my $settings;
    $settings->{'COMMENT'} = "Created by $createdby at $timestamp";

    my ($return_code, $return_msg) = write_config($configtype, "add", "$host_arg", "$group_arg", $settings);

    if ( $return_code eq "1" ) {
        print "Configfile $return_msg created\n";
    } else {
        print "$return_msg\n";
    }

    exit 0;
}

if ( $delete_arg ) {
    my $configtype;
    my $file;

    if ( $host_arg && $group_arg ) {
        $configtype = "host";
        $file = "$host_arg" . "_" . "$group_arg.yaml";
    } elsif ( ! $host_arg && $group_arg ) {
        $configtype = "group";
        $file = "$group_arg.yaml";
    };

    my ($return_code, $return_msg) = delete_config($configtype, "$file");
    print "$return_msg\n";

    exit 0;
}

#################################
# Command line arguments
#
sub parse_command_options {

    GetOptions(
        "help"        => sub { usage('') },
        "version"     => sub { usage("Current version number: $version") },
        "d|debug"     => \$debug_arg,
        "n|dry-run"   => \$dryrun_arg,
        "add"         => \$add_arg,
        "delete"      => \$delete_arg,
        "g|group=s"   => \$group_arg,
        "h|host=s"    => \$host_arg,
        "crontab"     => \$crontabonly,
        "showgroups"  => \$showgroups,
    ) or usage("Invalid commmand line options.");
    usage("Do not use together!") if ( $crontabonly && $showgroups );
    usage("Check the arguments!") unless ( ($add_arg || $delete_arg ) && (( $host_arg && $group_arg ) || $group_arg  ) || ( $crontabonly || $showgroups ) );

    $debug_arg = 1 if $dryrun_arg;

    return 1;
}

sub cli_args_override_global_config {

    $serverconfig{debug}      = $debug_arg      if $debug_arg;
    $serverconfig{debuglevel} = $debuglevel_arg if $debuglevel_arg;
    $serverconfig{dryrun}     = $dryrun_arg     if $dryrun_arg;

    return 1;
}

sub usage {
    my ($message) = @_;

    if ( defined $message && length $message ) {
        $message .= "\n"
            unless $message =~ /\n$/;
    }

    my $command = $0;
    $command    =~ s#^.*/##;

    print <<"EOF";
        $message
        Usage Examples:

        $command --add -h <hostname> -g <group>     # create a new host config
        $command --add -g <group>                   # create a new group config

        $command --delete -h <hostname> -g <group>  # delete a existing host config
        $command --delete -g <group>                # delete a existing group config

        $command --crontab                          # generated and write crontab
        $command --showgroups                       # show available groups
        $command --help                             # show this help message
        $command --version                          # show version number and help

        Optional Arguments:

        -d              # show debugging messages
        -n              # dry-run without making changes

EOF
    exit 0;
}

